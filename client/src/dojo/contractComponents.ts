/* Autogenerated file. Do not edit manually. */

import { defineComponent, Type as RecsType, World } from "@dojoengine/recs";

export type ContractComponents = Awaited<ReturnType<typeof defineContractComponents>>;

export function defineContractComponents(world: World) {
  return {
    AbilityState: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, unit_id: RecsType.Number, player_id: RecsType.Number, is_active: RecsType.Boolean, cooldown: RecsType.BigInt, effectiveness: RecsType.Number, unit: RecsType.Number, units_abilities_state: { move_level: RecsType.Number, attack_level: RecsType.Number, defend_level: RecsType.Number, patrol_level: RecsType.Number, stealth_level: RecsType.Number, recon_level: RecsType.Number, hack_level: RecsType.Number, repair_level: RecsType.Number, airlift_level: RecsType.Number, bombard_level: RecsType.Number, submerge_level: RecsType.Number } },
        {
          metadata: {
            namespace: "command_nexus",
            name: "AbilityState",
            types: ["u32","u32","u32","bool","u64","u32","enum","u8","u8","u8","u8","u8","u8","u8","u8","u8","u8","u8"],
            customTypes: ["UnitType","UnitAbilities"],
          },
        }
      );
    })(),
    AirUnit: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, unit_id: RecsType.Number, player_id: RecsType.Number, range: RecsType.BigInt, firepower: RecsType.Number, accuracy: RecsType.Number, energy: RecsType.Number, accessories: { missiles: RecsType.Number, repair_kits: RecsType.Number }, health: { current: RecsType.Number, max: RecsType.Number }, position: { coord: { x: RecsType.BigInt, y: RecsType.BigInt, z: RecsType.BigInt } }, battlefield_name: RecsType.Number, altitude: RecsType.Number, max_speed: RecsType.Number },
        {
          metadata: {
            namespace: "command_nexus",
            name: "AirUnit",
            types: ["u32","u32","u32","u256","u32","u8","u32","u32","u8","u32","u32","u256","u256","u256","enum","u32","u32"],
            customTypes: ["AirUnitAccessories","AirUnitHealth","Position","Vec3","BattlefieldName"],
          },
        }
      );
    })(),
    Airport: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, player_id: RecsType.Number, airport_id: RecsType.Number, airport_name: RecsType.BigInt },
        {
          metadata: {
            namespace: "command_nexus",
            name: "Airport",
            types: ["u32","u32","u32","felt252"],
            customTypes: [],
          },
        }
      );
    })(),
    Armored: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, unit_id: RecsType.Number, player_id: RecsType.Number, accuracy: RecsType.Number, firepower: RecsType.Number, range: RecsType.BigInt, energy: RecsType.Number, accessories: { ammunition: RecsType.Number, repair_kits: RecsType.Number }, armored_health: { current: RecsType.Number, max: RecsType.Number }, position: { coord: { x: RecsType.BigInt, y: RecsType.BigInt, z: RecsType.BigInt } }, battlefield_name: RecsType.Number },
        {
          metadata: {
            namespace: "command_nexus",
            name: "Armored",
            types: ["u32","u32","u32","u8","u32","u256","u32","u32","u8","u32","u32","u256","u256","u256","enum"],
            customTypes: ["ArmoredAccessories","ArmoredHealth","Position","Vec3","BattlefieldName"],
          },
        }
      );
    })(),
    Armory: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, player_id: RecsType.Number, armory_id: RecsType.Number, armory_name: RecsType.BigInt, weapon_inventory: RecsType.Number, ammo_inventory: RecsType.Number, status: RecsType.Number },
        {
          metadata: {
            namespace: "command_nexus",
            name: "Armory",
            types: ["u32","u32","u32","felt252","u32","u32","enum"],
            customTypes: ["MillitaryStatus"],
          },
        }
      );
    })(),
    Bank: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, player_id: RecsType.Number, bank_id: RecsType.Number, bank_name: RecsType.BigInt, total_deposit: RecsType.Number, total_withdrawals: RecsType.Number, interest_rate: RecsType.Number, status: RecsType.Number },
        {
          metadata: {
            namespace: "command_nexus",
            name: "Bank",
            types: ["u32","u32","u32","felt252","u32","u32","u32","enum"],
            customTypes: ["FinancialStatus"],
          },
        }
      );
    })(),
    Barracks: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, player_id: RecsType.Number, barracks_id: RecsType.Number, barrack_name: RecsType.BigInt, capacity: RecsType.Number, current_soldiers: RecsType.Number, status: RecsType.Number },
        {
          metadata: {
            namespace: "command_nexus",
            name: "Barracks",
            types: ["u32","u32","u32","felt252","u32","u32","enum"],
            customTypes: ["MillitaryStatus"],
          },
        }
      );
    })(),
    Cable: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, player_id: RecsType.Number, cable_id: RecsType.Number, cable_name: RecsType.BigInt, length: RecsType.Number, status: RecsType.BigInt },
        {
          metadata: {
            namespace: "command_nexus",
            name: "Cable",
            types: ["u32","u32","u32","felt252","u32","felt252"],
            customTypes: [],
          },
        }
      );
    })(),
    CommandCenter: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, player_id: RecsType.Number, center_id: RecsType.Number, center_name: RecsType.BigInt, coordination_level: RecsType.Number, status: RecsType.Number },
        {
          metadata: {
            namespace: "command_nexus",
            name: "CommandCenter",
            types: ["u32","u32","u32","felt252","u32","enum"],
            customTypes: ["MillitaryStatus"],
          },
        }
      );
    })(),
    Communication: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, player_id: RecsType.Number, cable: { game_id: RecsType.Number, player_id: RecsType.Number, cable_id: RecsType.Number, cable_name: RecsType.BigInt, length: RecsType.Number, status: RecsType.BigInt }, communication_tower: { game_id: RecsType.Number, player_id: RecsType.Number, tower_id: RecsType.Number, tower_name: RecsType.BigInt, height: RecsType.Number, status: RecsType.BigInt }, satellite_dish: { game_id: RecsType.Number, player_id: RecsType.Number, dish_id: RecsType.Number, dish_name: RecsType.BigInt, diameter: RecsType.Number, status: RecsType.BigInt }, relay_station: { game_id: RecsType.Number, player_id: RecsType.Number, station_id: RecsType.Number, station_name: RecsType.BigInt, capacity: RecsType.Number, status: RecsType.BigInt }, control_center: { game_id: RecsType.Number, player_id: RecsType.Number, center_id: RecsType.Number, center_name: RecsType.BigInt, location: RecsType.BigInt, status: RecsType.BigInt } },
        {
          metadata: {
            namespace: "command_nexus",
            name: "Communication",
            types: ["u32","u32","u32","u32","u32","felt252","u32","felt252","u32","u32","u32","felt252","u32","felt252","u32","u32","u32","felt252","u32","felt252","u32","u32","u32","felt252","u32","felt252","u32","u32","u32","felt252","felt252","felt252"],
            customTypes: ["Cable","CommunicationTower","SatelliteDish","RelayStation","ControlCenter"],
          },
        }
      );
    })(),
    CommunicationTower: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, player_id: RecsType.Number, tower_id: RecsType.Number, tower_name: RecsType.BigInt, height: RecsType.Number, status: RecsType.BigInt },
        {
          metadata: {
            namespace: "command_nexus",
            name: "CommunicationTower",
            types: ["u32","u32","u32","felt252","u32","felt252"],
            customTypes: [],
          },
        }
      );
    })(),
    ControlCenter: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, player_id: RecsType.Number, center_id: RecsType.Number, center_name: RecsType.BigInt, location: RecsType.BigInt, status: RecsType.BigInt },
        {
          metadata: {
            namespace: "command_nexus",
            name: "ControlCenter",
            types: ["u32","u32","u32","felt252","felt252","felt252"],
            customTypes: [],
          },
        }
      );
    })(),
    CyberUnit: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, unit_id: RecsType.Number, player_id: RecsType.Number, hacking_range: RecsType.BigInt, encryption_strength: RecsType.Number, stealth: RecsType.Number, range: RecsType.BigInt, accessories: { malware: RecsType.Number, repair_kits: RecsType.Number }, health: { current: RecsType.Number, max: RecsType.Number }, position: { coord: { x: RecsType.BigInt, y: RecsType.BigInt, z: RecsType.BigInt } }, battlefield_name: RecsType.Number, energy: RecsType.Number },
        {
          metadata: {
            namespace: "command_nexus",
            name: "CyberUnit",
            types: ["u32","u32","u32","u64","u32","u8","u256","u32","u8","u32","u32","u256","u256","u256","enum","u32"],
            customTypes: ["CyberUnitAccessories","CyberUnitHealth","Position","Vec3","BattlefieldName"],
          },
        }
      );
    })(),
    Depot: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, player_id: RecsType.Number, depot_id: RecsType.Number, depot_name: RecsType.BigInt },
        {
          metadata: {
            namespace: "command_nexus",
            name: "Depot",
            types: ["u32","u32","u32","felt252"],
            customTypes: [],
          },
        }
      );
    })(),
    Game: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, next_to_move: RecsType.BigInt, minimum_moves: RecsType.Number, over: RecsType.Boolean, player_count: RecsType.Number, unit_count: RecsType.Number, nonce: RecsType.Number, price: RecsType.BigInt, clock: RecsType.BigInt, penalty: RecsType.BigInt, limit: RecsType.Number, winner: RecsType.BigInt, arena_host: RecsType.BigInt, seed: RecsType.BigInt, available_home_bases: { base1: RecsType.BigInt, base2: RecsType.BigInt, base3: RecsType.BigInt, base4: RecsType.BigInt }, player_name: RecsType.BigInt },
        {
          metadata: {
            namespace: "command_nexus",
            name: "Game",
            types: ["u32","contractaddress","u8","bool","u8","u32","u32","u256","u64","u64","u32","contractaddress","contractaddress","felt252","felt252","felt252","felt252","felt252","felt252"],
            customTypes: ["HomeBasesTuple"],
          },
        }
      );
    })(),
    GasStation: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, player_id: RecsType.Number, station_id: RecsType.Number, station_name: RecsType.BigInt, fuel_available: RecsType.Number, fuel_price: RecsType.Number, status: RecsType.Number },
        {
          metadata: {
            namespace: "command_nexus",
            name: "GasStation",
            types: ["u32","u32","u32","felt252","u32","u32","enum"],
            customTypes: ["EnergyStatus"],
          },
        }
      );
    })(),
    GasStorage: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, player_id: RecsType.Number, storage_id: RecsType.Number, storage_name: RecsType.BigInt, capacity: RecsType.Number, current_storage: RecsType.Number, status: RecsType.Number },
        {
          metadata: {
            namespace: "command_nexus",
            name: "GasStorage",
            types: ["u32","u32","u32","felt252","u32","u32","enum"],
            customTypes: ["EnergyStatus"],
          },
        }
      );
    })(),
    Infantry: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, unit_id: RecsType.Number, player_id: RecsType.Number, range: RecsType.BigInt, energy: RecsType.Number, accuracy: RecsType.Number, accessories: { ammunition: RecsType.Number, first_aid_kit: RecsType.Number }, health: { current: RecsType.Number, max: RecsType.Number }, position: { coord: { x: RecsType.BigInt, y: RecsType.BigInt, z: RecsType.BigInt } }, battlefield_name: RecsType.Number },
        {
          metadata: {
            namespace: "command_nexus",
            name: "Infantry",
            types: ["u32","u32","u32","u256","u32","u8","u32","u32","u32","u32","u256","u256","u256","enum"],
            customTypes: ["InfantryAccessories","InfantryHealth","Position","Vec3","BattlefieldName"],
          },
        }
      );
    })(),
    InnovationCenter: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, player_id: RecsType.Number, center_id: RecsType.Number, center_name: RecsType.BigInt, innovation_points: RecsType.Number, status: RecsType.Number },
        {
          metadata: {
            namespace: "command_nexus",
            name: "InnovationCenter",
            types: ["u32","u32","u32","felt252","u32","enum"],
            customTypes: ["ResearchStatus"],
          },
        }
      );
    })(),
    IntelligenceAgency: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, player_id: RecsType.Number, agency_id: RecsType.Number, agency_name: RecsType.BigInt, agency_type: RecsType.Number, resource_allocation: RecsType.Number, status: RecsType.Number },
        {
          metadata: {
            namespace: "command_nexus",
            name: "IntelligenceAgency",
            types: ["u32","u32","u32","felt252","enum","u32","enum"],
            customTypes: ["AgencyType","AgencyStatus"],
          },
        }
      );
    })(),
    IntelligenceReport: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, player_id: RecsType.Number, report_id: RecsType.Number, source_agency_id: RecsType.Number, target_player_id: RecsType.Number, intelligence_data: RecsType.BigInt, reliability_score: RecsType.Number, timestamp: RecsType.BigInt, status: RecsType.Number },
        {
          metadata: {
            namespace: "command_nexus",
            name: "IntelligenceReport",
            types: ["u32","u32","u32","u32","u32","felt252","u32","u64","enum"],
            customTypes: ["AgencyStatus"],
          },
        }
      );
    })(),
    InvestmentFirm: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, player_id: RecsType.Number, firm_id: RecsType.Number, firm_name: RecsType.BigInt, assets_under_management: RecsType.Number, active_investments: RecsType.Number, status: RecsType.Number },
        {
          metadata: {
            namespace: "command_nexus",
            name: "InvestmentFirm",
            types: ["u32","u32","u32","felt252","u32","u32","enum"],
            customTypes: ["FinancialStatus"],
          },
        }
      );
    })(),
    Laboratory: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, player_id: RecsType.Number, lab_id: RecsType.Number, lab_name: RecsType.BigInt, research_capacity: RecsType.Number, ongoing_projects: RecsType.Number, status: RecsType.Number },
        {
          metadata: {
            namespace: "command_nexus",
            name: "Laboratory",
            types: ["u32","u32","u32","felt252","u32","u32","enum"],
            customTypes: ["ResearchStatus"],
          },
        }
      );
    })(),
    NuclearPowerStation: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, player_id: RecsType.Number, station_id: RecsType.Number, station_name: RecsType.BigInt, power_output: RecsType.Number, fuel_level: RecsType.Number, status: RecsType.Number },
        {
          metadata: {
            namespace: "command_nexus",
            name: "NuclearPowerStation",
            types: ["u32","u32","u32","felt252","u32","u32","enum"],
            customTypes: ["EnergyStatus"],
          },
        }
      );
    })(),
    OilDepot: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, player_id: RecsType.Number, depot_id: RecsType.Number, depot_name: RecsType.BigInt, capacity: RecsType.Number, current_storage: RecsType.Number, status: RecsType.Number },
        {
          metadata: {
            namespace: "command_nexus",
            name: "OilDepot",
            types: ["u32","u32","u32","felt252","u32","u32","enum"],
            customTypes: ["EnergyStatus"],
          },
        }
      );
    })(),
    Player: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, index: RecsType.Number, address: RecsType.BigInt, name: RecsType.BigInt, supply: { infantry: RecsType.Number, armored: RecsType.Number, air: RecsType.Number, naval: RecsType.Number, cyber: RecsType.Number }, last_action: RecsType.BigInt, rank: RecsType.Number, player_score: { score: RecsType.Number, kills: RecsType.Number, deaths: RecsType.Number, assists: RecsType.Number }, home_base: RecsType.Number, commands_remaining: RecsType.Number, turn_start_time: RecsType.BigInt },
        {
          metadata: {
            namespace: "command_nexus",
            name: "Player",
            types: ["u32","u32","contractaddress","felt252","u32","u32","u32","u32","u32","u64","u8","u32","u16","u16","u16","enum","u8","u64"],
            customTypes: ["UnitsSupply","PlayerScore","BattlefieldName"],
          },
        }
      );
    })(),
    PlayerState: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, player_id: RecsType.Number, supply: { game_id: RecsType.Number, player_id: RecsType.Number, infantry: RecsType.Number, armored: RecsType.Number, air: RecsType.Number, naval: RecsType.Number, cyber: RecsType.Number } },
        {
          metadata: {
            namespace: "command_nexus",
            name: "PlayerState",
            types: ["u32","u32","u32","u32","u32","u32","u32","u32","u32"],
            customTypes: ["UnitsSupply"],
          },
        }
      );
    })(),
    RailwayStation: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, player_id: RecsType.Number, station_id: RecsType.Number, station_name: RecsType.BigInt },
        {
          metadata: {
            namespace: "command_nexus",
            name: "RailwayStation",
            types: ["u32","u32","u32","felt252"],
            customTypes: [],
          },
        }
      );
    })(),
    RelayStation: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, player_id: RecsType.Number, station_id: RecsType.Number, station_name: RecsType.BigInt, capacity: RecsType.Number, status: RecsType.BigInt },
        {
          metadata: {
            namespace: "command_nexus",
            name: "RelayStation",
            types: ["u32","u32","u32","felt252","u32","felt252"],
            customTypes: [],
          },
        }
      );
    })(),
    SatelliteDish: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, player_id: RecsType.Number, dish_id: RecsType.Number, dish_name: RecsType.BigInt, diameter: RecsType.Number, status: RecsType.BigInt },
        {
          metadata: {
            namespace: "command_nexus",
            name: "SatelliteDish",
            types: ["u32","u32","u32","felt252","u32","felt252"],
            customTypes: [],
          },
        }
      );
    })(),
    Scoreboard: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, player_id: RecsType.Number, player_count: RecsType.Number, top_score: RecsType.Number, last_updated: RecsType.BigInt },
        {
          metadata: {
            namespace: "command_nexus",
            name: "Scoreboard",
            types: ["u32","u32","u8","u32","u64"],
            customTypes: [],
          },
        }
      );
    })(),
    Seaport: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, player_id: RecsType.Number, seaport_id: RecsType.Number, seaport_name: RecsType.BigInt },
        {
          metadata: {
            namespace: "command_nexus",
            name: "Seaport",
            types: ["u32","u32","u32","felt252"],
            customTypes: [],
          },
        }
      );
    })(),
    Ship: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, unit_id: RecsType.Number, player_id: RecsType.Number, range: RecsType.BigInt, firepower: RecsType.Number, accuracy: RecsType.Number, ship_accessories: { gun_ammunition: RecsType.Number, missile_ammunition: RecsType.Number, repair_kits: RecsType.Number }, ship_health: { current: RecsType.Number, max: RecsType.Number }, position: { coord: { x: RecsType.BigInt, y: RecsType.BigInt, z: RecsType.BigInt } }, battlefield_name: RecsType.Number, energy: RecsType.Number },
        {
          metadata: {
            namespace: "command_nexus",
            name: "Ship",
            types: ["u32","u32","u32","u256","u32","u8","u32","u32","u8","u32","u32","u256","u256","u256","enum","u32"],
            customTypes: ["ShipAccessories","ShipHealth","Position","Vec3","BattlefieldName"],
          },
        }
      );
    })(),
    SolarPowerPlant: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, player_id: RecsType.Number, plant_id: RecsType.Number, plant_name: RecsType.Number, power_output: RecsType.BigInt, status: RecsType.Number },
        {
          metadata: {
            namespace: "command_nexus",
            name: "SolarPowerPlant",
            types: ["u32","u32","u32","u32","felt252","enum"],
            customTypes: ["EnergyStatus"],
          },
        }
      );
    })(),
    SpyNetwork: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, player_id: RecsType.Number, network_id: RecsType.Number, network_name: RecsType.BigInt, number_of_spies: RecsType.Number, intel_reliability: RecsType.Number, status: RecsType.Number },
        {
          metadata: {
            namespace: "command_nexus",
            name: "SpyNetwork",
            types: ["u32","u32","u32","felt252","u32","u32","enum"],
            customTypes: ["AgencyStatus"],
          },
        }
      );
    })(),
    StockExchange: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, player_id: RecsType.Number, exchange_id: RecsType.Number, exchange_name: RecsType.BigInt, listed_companies: RecsType.Number, trading_volume: RecsType.Number, status: RecsType.Number },
        {
          metadata: {
            namespace: "command_nexus",
            name: "StockExchange",
            types: ["u32","u32","u32","felt252","u32","u32","enum"],
            customTypes: ["FinancialStatus"],
          },
        }
      );
    })(),
    TestingGround: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, player_id: RecsType.Number, ground_id: RecsType.Number, ground_name: RecsType.BigInt, test_capacity: RecsType.Number, ongiong_tests: RecsType.Number, status: RecsType.Number },
        {
          metadata: {
            namespace: "command_nexus",
            name: "TestingGround",
            types: ["u32","u32","u32","felt252","u32","u32","enum"],
            customTypes: ["ResearchStatus"],
          },
        }
      );
    })(),
    TrainingFacility: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, player_id: RecsType.Number, facility_id: RecsType.Number, facility_name: RecsType.BigInt, training_capacity: RecsType.Number, current_training: RecsType.Number, status: RecsType.Number },
        {
          metadata: {
            namespace: "command_nexus",
            name: "TrainingFacility",
            types: ["u32","u32","u32","felt252","u32","u32","enum"],
            customTypes: ["MillitaryStatus"],
          },
        }
      );
    })(),
    Transportation: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, player_id: RecsType.Number, airport: { game_id: RecsType.Number, player_id: RecsType.Number, airport_id: RecsType.Number, airport_name: RecsType.BigInt }, seaport: { game_id: RecsType.Number, player_id: RecsType.Number, seaport_id: RecsType.Number, seaport_name: RecsType.BigInt }, railway_station: { game_id: RecsType.Number, player_id: RecsType.Number, station_id: RecsType.Number, station_name: RecsType.BigInt }, depot: { game_id: RecsType.Number, player_id: RecsType.Number, depot_id: RecsType.Number, depot_name: RecsType.BigInt } },
        {
          metadata: {
            namespace: "command_nexus",
            name: "Transportation",
            types: ["u32","u32","u32","u32","u32","felt252","u32","u32","u32","felt252","u32","u32","u32","felt252","u32","u32","u32","felt252"],
            customTypes: ["Airport","Seaport","RailwayStation","Depot"],
          },
        }
      );
    })(),
    Treasury: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, player_id: RecsType.Number, treasury_id: RecsType.Number, treasury_name: RecsType.BigInt, funds_available: RecsType.Number, funds_reserved: RecsType.Number, status: RecsType.Number },
        {
          metadata: {
            namespace: "command_nexus",
            name: "Treasury",
            types: ["u32","u32","u32","felt252","u32","u32","enum"],
            customTypes: ["FinancialStatus"],
          },
        }
      );
    })(),
    UnitState: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, player_id: RecsType.Number, unit_id: RecsType.Number, x: RecsType.BigInt, y: RecsType.BigInt, z: RecsType.BigInt, mode: RecsType.Number, environment: { terrain: RecsType.Number, cover_level: RecsType.Number, elevation: RecsType.Number } },
        {
          metadata: {
            namespace: "command_nexus",
            name: "UnitState",
            types: ["u32","u32","u32","u256","u256","u256","enum","enum","u8","u8"],
            customTypes: ["UnitMode","EnvironmentInfo","TerrainType"],
          },
        }
      );
    })(),
    UnitsSupply: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, player_id: RecsType.Number, infantry: RecsType.Number, armored: RecsType.Number, air: RecsType.Number, naval: RecsType.Number, cyber: RecsType.Number },
        {
          metadata: {
            namespace: "command_nexus",
            name: "UnitsSupply",
            types: ["u32","u32","u32","u32","u32","u32","u32"],
            customTypes: [],
          },
        }
      );
    })(),
    UrbanBattlefield: (() => {
      return defineComponent(
        world,
        { game_id: RecsType.Number, battlefield_id: RecsType.Number, player_id: RecsType.Number, size: RecsType.Number, weather: { weather_condition: RecsType.Number, visibility: RecsType.Number, movement_penalty: RecsType.Number, comms_interference: RecsType.Number }, control: RecsType.Number },
        {
          metadata: {
            namespace: "command_nexus",
            name: "UrbanBattlefield",
            types: ["u32","u8","u32","u32","enum","u8","u8","u8","u16"],
            customTypes: ["WeatherEffect","WeatherCondition"],
          },
        }
      );
    })(),
  };
}
